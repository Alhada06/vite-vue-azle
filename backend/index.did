type ICRC1Account = record { owner : principal; subaccount : opt vec nat8 };
type ICRC1TransferArgs = record {
  to : ICRC1Account;
  fee : opt nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type ICRC1TransferError = variant {
  GenericError : _InlineICRC1TransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineICRC1TransferErrorBadBurn;
  Duplicate : _InlineICRC1TransferErrorDuplicate;
  BadFee : _InlineICRC1TransferErrorBadFee;
  CreatedInFuture : _InlineICRC1TransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineICRC1TransferErrorInsufficientFunds;
};
type ICRC1Value = variant {
  Int : int;
  Nat : nat;
  Blob : vec nat8;
  Text : text;
};
type ICRC2TransferFromArgs = record {
  to : ICRC1Account;
  fee : opt nat;
  from : ICRC1Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type ICRC2TransferFromError = variant {
  GenericError : _InlineICRC1TransferErrorGenericError;
  TemporarilyUnavailable;
  InsufficientAllowance : _InlineICRC2TransferFromErrorInsufficientAllowance;
  BadBurn : _InlineICRC1TransferErrorBadBurn;
  Duplicate : _InlineICRC1TransferErrorDuplicate;
  BadFee : _InlineICRC1TransferErrorBadFee;
  CreatedInFuture : _InlineICRC1TransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineICRC1TransferErrorInsufficientFunds;
};
type ManualReply = variant { Ok : nat; Err : ICRC1TransferError };
type ManualReply_1 = variant { Ok : nat; Err : ICRC2TransferFromError };
type User = record { id : principal; username : text };
type _InlineICRC1TransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineICRC1TransferErrorBadFee = record { expected_fee : nat };
type _InlineICRC1TransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineICRC1TransferErrorDuplicate = record { duplicate_of : nat };
type _InlineICRC1TransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
type _InlineICRC1TransferErrorInsufficientFunds = record { balance : nat };
type _InlineICRC2TransferFromErrorInsufficientAllowance = record {
  allowance : nat;
};
service : () -> {
  add : (nat) -> (nat);
  allUsers : () -> (vec User) query;
  caller : () -> (principal) query;
  callerIsRegistered : () -> (bool) query;
  callerProfile : () -> (opt User) query;
  constainsId : (principal) -> (bool) query;
  createUser : (text, principal) -> (opt User);
  get : () -> (nat) query;
  getAllUsers : () -> (vec User) query;
  getById : (principal) -> (opt User) query;
  getUserById : (principal) -> (opt User) query;
  icrc1_balance_of : (ICRC1Account) -> (nat) query;
  icrc1_metadata : () -> (vec record { text; ICRC1Value }) query;
  icrc1_transfer : (ICRC1TransferArgs) -> (ManualReply);
  icrc2_transfer : (ICRC2TransferFromArgs) -> (ManualReply_1);
  inc : () -> (nat);
  insertUser : (text, principal) -> (opt User);
  isRegistered : (principal) -> (bool) query;
  ledgerEnvVar : () -> (text) query;
  updateMyProfile : (text) -> (opt User);
}